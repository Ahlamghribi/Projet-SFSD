#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
//structure de l'nregistremment date


typedef struct date
{
    int anne;
    int mois;
    int jour;

}date;

//structure de l'entet
typedef struct entete
{
 int nbbloc;//nobre de bloc total
 int nbenreg;//nb de enregistrement total

}entete;

//structure de l'eregistrement medicamment



typedef struct medicamment{
   int reference; // le champ utilisé comme clé de recherche et pour ordonner le fichier
   float prix;
   date expiration;
   date fabrication;
   char ingredient[50];// le champ utiliser pour la taille variable
   int quantite;
}medicamment;

// la structure de block


typedef struct bloc
{
   char buff[500];
   int nbe ; //nobre d'enregistement dans le bloc (dans la case 0 de le bloc
}bloc;

void entet (FILE *F,int i,entete e)
 {
    if(i==1)
    {
        return e.nbbloc;
    }
    if(i==2)
    {
        return e.nbenreg;
    }
 }

 void ref (int tab[4])
 {
     int s=0;
   for (int i=0;i<=3;i++)
   {
       s=s*10+tab[i];
   }
   return s;
 }
 int taille (FILE*F,medicament ){
   while(int cmp<buffer.nbe-1)
        {
            if (buffer.buff[int t]=='#')
            {
                cmp=cmp+1;
            }
            t=t+1;
            return(t)
        }}
 x char[500];
void insertion (FILE *F,medicamment eng ){
 int cle =ref(eng.reference) ;
recherche (cle,FILE *F,entete e);
if (!trouv){ /* cet enregistrement n existe pas */
   F = fopen("sfsd.txt",r);
   boolean continu=vrai ;
    while (continu && i <= entete(F, 1)) { /* i cest le bloc ou on va inserer eng par la fonction rech */
LireDir(F, i,buffer); /* on copie  tous les engs de ce bloc dans buffer */
x=buffer.buff[buffer.nbe]; /* on copie dernier eng dans une varioable temp*/
j=dernier caractere prd ;
while( cmp<buffer.nbe-1)
        {
            if (buffer.buff[int k]=='#')
            {
                cmp=cmp+1;
            }
            t=t+1;}
while(k>j)  {       
buffer.buff[k+ la taille deng ]=buffer.buff[k];
k=k+1;}
buffer.buff[j+1]=eng;
  while( cmp<buffer.nbe)
        {
            if (buffer.buff[int t]=='#')
            {
                cmp=cmp+1;
            }
            t=t+1;}
 if(t<500){
     t=t+taille(x);
     buffer.buff[t]=x;
       continu=faux;}
  else{
 while(i<entet(f,)){
    LireDir(F, i,buffer);    
    while( cmp<buffer.nbe)
        {
            if (buffer.buff[int k]=='#')
            {
                cmp=cmp+1;
            }
            t=t+1;
          }}
  if(t>500){
      i=i+1;}
  else{
    
t=t+taille(x);}}
    
  }   
    }
    
    
 
  
  

            
            
   
   
}


