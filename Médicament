// Function for searching a reference in a file
location recherche(int cle, FILE* F, entete e, Bloc* buffer) {
    int bi = 1;
    int bs = e.nbbloc;
    bool stop = false;
    char t[4];
    int cmp = 0;
    int k = 0;
    int a, z, d;
    int inf, sup;
    int i = 1;
    int j = 1;
    bool trouve = false;
    location l;

    while (bi <= bs && !trouve && !stop) {
        i = (bi + bs) / 2;
        fseek(F, (i) * sizeof(Bloc), SEEK_SET);
        fread(buffer->tab, sizeof(char), sizeof(Bloc), F);

        if(buffer->nb==1)
        {
         for (int l = 0; l <= 3; l++) {
            t[l] = buffer->tab[l];
            printf("\nle buffer de la recherhe %c :",buffer->tab[l] );
        }
        a = ref(t);
        if (a == cle)
               {
                    trouve = true;
                }
            l.j=0;
            l.i=i;
            l.trouve =trouve;

        }
     else{
        for (cmp = 0; cmp < buffer->nb - 1; cmp++) {
            if (buffer->tab[k] == '#') {
                cmp++;
            }
            k++;
        }

        for (int l = 0; l <= 3; l++) {
            t[l] = buffer->tab[l];
        }
        a = ref(t);

        for (int l = 0; l <= 3; l++) {
            t[l] = buffer->tab[k];
            k++;
        }
        z = ref(t);

        if (cle >= a && cle <= z) {
            inf = 1;
            sup = buffer->nb;
            while (inf < sup && !trouve) {
                j = (inf + sup) / 2;
                cmp = 1;
                k = 1;
                while (cmp < j) {
                    if (buffer->tab[k] == '#') {
                        cmp = cmp + 1;
                    }
                    k = k + 1;
                }

                for (int l = 0; l <= 3; l++) {
                    t[l] = buffer->tab[k];
                    k = k + 1;
                }

                d = ref(t);

                if (d == cle) {
                    trouve = true;
                } else {
                    if (cle < d) {
                        sup = j - 1;
                    } else {
                        inf = j + 1;
                    }
                }
            }

            if (inf >= sup) {
                j = inf;
            }
            stop = true;
        } else {
            if (cle < a) {
                bs = i - 1;
            } else {
                bi = i + 1;
            }
        }
    }

    if (bi > bs) {
        i = bi;
        j = 1;
    }
    l.i = i;
    l.j = j;
    l.trouve = trouve;
    }
    return l;
}
