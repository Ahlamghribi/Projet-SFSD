#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>

// Structures for date, location, medicament, bloc, and entete

typedef struct {
    int jour, mois, annee;
} date;

typedef struct {
    int i, j;
    bool trouve;
} location;

typedef struct {
    char nom[20];
    int qte;
    float prix;
    int reference;
    date datefabr, dateexp;
} Medicament;

typedef struct {
    char tab[500];
    int nb;
} Bloc;

typedef struct {
    int nbrenrg, nbbloc;
} entete;

int taillenrg(Bloc buf, int j) {
    int cmp = 1;

    while (buf.tab[j] != '#') {
        j++;
        cmp++;
    }

    return cmp;
}

// Function to calculate the size of a bloc
int taillebloc(Bloc buf) {
    int j = 1;

    for (int i = 0; i < buf.nb; i++) {
        j = j + taillenrg(buf, j);
        j++;
    }

    return j;
}


// Function to convert Medicament to char array
void tochar(char ch[500], Medicament med) {
    int i = 0;

    // Convert reference to string
    i += sprintf(&ch[i], "%04d$", med.reference);

    // Add medication name
    strncpy(&ch[i], med.nom, sizeof(med.nom) - 1);
    i += strlen(med.nom);
    ch[i] = '$';
    i++;

    // Convert quantity to string
    i += sprintf(&ch[i], "%d$", med.qte);

    // Convert price to string
    i += sprintf(&ch[i], "%.2f$", med.prix);

    // Convert dates to string
    i += sprintf(&ch[i], "%02d %02d %04d$", med.datefabr.jour, med.datefabr.mois, med.datefabr.annee);
    i += sprintf(&ch[i], "%02d %02d %04d$", med.dateexp.jour, med.dateexp.mois, med.dateexp.annee);

    // Add end of enregistrement character
    ch[i] = '#';
}

// Function to display information from a bloc
void afficher(Bloc buf, int j) {
    char ch[500];
    while (buf.tab[j] != '#') {
        int i = 0;

        // Display medication name
        printf("Le nom de medicaments : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Display quantity
        i = 0;
        printf("La quantite de medicaments : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Display price
        i = 0;
        printf("Le prix de medicaments : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Display date of fabrication
        i = 0;
        printf("La date de fabrication (jour mois annee) : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Display date of expiration
        i = 0;
        printf("La date de l'expiration (jour mois annee) : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        printf("\n");
    }
}

// Function to extract reference from a string
int ref(char tab[4]) {
    int s = 1;
    s = atoi(tab);
    printf("\n%d ref", s);
    return (s);
}

// Function for searching a reference in a file
location recherche(int cle, FILE* F, entete e, Bloc* buffer) {
    int bi = 1;
    int bs = e.nbbloc;
    bool stop = false;
    char t[4];
    int cmp = 0;
    int k = 0;
    int a, z, d;
    int inf, sup;
    int i = 1;
    int j = 1;
    bool trouve = false;
    location l;

    while (bi <= bs && !trouve && !stop) {
        i = (bi + bs) / 2;
        fseek(F, (i) * sizeof(Bloc), SEEK_SET);
        fread(buffer->tab, sizeof(char), sizeof(Bloc), F);

        if(buffer->nb==1)
        {
         for (int l = 0; l <= 3; l++) {
            t[l] = buffer->tab[l];
            printf("\nle buffer de la recherhe %c :",buffer->tab[l] );
        }
        a = ref(t);
        if (a == cle)
               {
                    trouve = true;
                }
            l.j=0;
            l.i=i;
            l.trouve =trouve;

        }
     else{
        for (cmp = 0; cmp < buffer->nb - 1; cmp++) {
            if (buffer->tab[k] == '#') {
                cmp++;
            }
            k++;
        }

        for (int l = 0; l <= 3; l++) {
            t[l] = buffer->tab[l];
        }
        a = ref(t);

        for (int l = 0; l <= 3; l++) {
            t[l] = buffer->tab[k];
            k++;
        }
        z = ref(t);

        if (cle >= a && cle <= z) {
            inf = 1;
            sup = buffer->nb;
            while (inf < sup && !trouve) {
                j = (inf + sup) / 2;
                cmp = 1;
                k = 1;
                while (cmp < j) {
                    if (buffer->tab[k] == '#') {
                        cmp = cmp + 1;
                    }
                    k = k + 1;
                }

                for (int l = 0; l <= 3; l++) {
                    t[l] = buffer->tab[k];
                    k = k + 1;
                }

                d = ref(t);

                if (d == cle) {
                    trouve = true;
                } else {
                    if (cle < d) {
                        sup = j - 1;
                    } else {
                        inf = j + 1;
                    }
                }
            }

            if (inf >= sup) {
                j = inf;
            }
            stop = true;
        } else {
            if (cle < a) {
                bs = i - 1;
            } else {
                bi = i + 1;
            }
        }
    }

    if (bi > bs) {
        i = bi;
        j = 1;
    }
    l.i = i;
    l.j = j;
    l.trouve = trouve;
    }
    return l;
}


Bloc insertion(FILE* F, Medicament eng, entete* e, Bloc* buffer) {
    int j = 1;
    char ch[500];
    tochar(ch, eng);
    location l;
    bool trouve;

    F = fopen("medicaments.dat", "rb+");

    if (e->nbrenrg == 0) {
        fseek(F, 0, SEEK_SET);
        fwrite(ch, sizeof(char), strlen(ch), F);
        for (int k = 0; k <= taillenrg(*buffer, j); k++) {
            buffer->tab[k] = ch[k];

        }
        e->nbrenrg++;
    } else {
        l = recherche(eng.reference, F, *e, buffer);

        if (!l.trouve) {
            fseek(F, (l.i) * sizeof(Bloc), SEEK_SET);
            fread(buffer->tab, sizeof(char), sizeof(Bloc), F);

            while (j <= taillenrg(*buffer, j) && eng.reference > atoi(&buffer->tab[j])) {
                j++;
            }

            int t = taillenrg(*buffer, j) - 1;
            while (t > 0) {
                buffer->tab[j + t] = buffer->tab[j + t - 1];
                t--;
            }

            for (int k = 0; k < strlen(ch); k++) {
                buffer->tab[j + k] = ch[k];

            }

            fseek(F, (l.i) * sizeof(Bloc), SEEK_SET);
            fwrite(buffer->tab, sizeof(char), sizeof(Bloc), F);
            e->nbrenrg++;
        }
    }

    fclose(F);
    return *buffer;
}
