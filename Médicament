#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>

// Structures pour date, localisation, médicament, bloc et entête

typedef struct {
    int jour, mois, annee;
} date;

typedef struct {
    int i, j;
    bool trouve;
} location;

typedef struct {
    char nom[20];
    int qte;
    float prix;
    int reference;
    date datefabr, dateexp;
} Medicament;

typedef struct {
    char tab[500];
    int nb;
} Bloc;

typedef struct {
    int cas, reference, bloc;
} Index;

typedef struct {
    int nbrenrg, nbbloc;
} entete;

// Fonction pour calculer la taille d'un enregistrement
int taillenrg(Bloc buf, int j) {
    int cmp = 1;

    while (buf.tab[j] != '#') {
        j++;
        cmp++;
    }

    return cmp;
}

// Fonction pour calculer la taille d'un bloc
int taillebloc(Bloc buf) {
    int j = 1;

    for (int i = 0; i < buf.nb; i++) {
        j = j + taillenrg(buf, j);
        j++;
    }

    return j;
}

// Fonction pour convertir un médicament en tableau de caractères
void tochar(char ch[500], Medicament med) {
    int i = 0;

    // Convertir la référence en chaîne de caractères
    i += sprintf(&ch[i], "%04d$", med.reference);

    // Ajouter le nom du médicament
    strncpy(&ch[i], med.nom, sizeof(med.nom) - 1);
    i += strlen(med.nom);
    ch[i] = '$';
    i++;

    // Convertir la quantité en chaîne de caractères
    i += sprintf(&ch[i], "%d$", med.qte);

    // Convertir le prix en chaîne de caractères
    i += sprintf(&ch[i], "%.2f$", med.prix);

    // Convertir les dates en chaînes de caractères
    i += sprintf(&ch[i], "%02d %02d %04d$", med.datefabr.jour, med.datefabr.mois, med.datefabr.annee);
    i += sprintf(&ch[i], "%02d %02d %04d$", med.dateexp.jour, med.dateexp.mois, med.dateexp.annee);

    // Ajouter le caractère de fin d'enregistrement
    ch[i] = '#';
}

// Fonction pour afficher un enregistrement
void afficher(Bloc buf, int j) {
    char ch[500];
    while (buf.tab[j] != '#') {
        int i = 0;

        // Afficher le nom du médicament
        printf("Le nom de médicaments : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Afficher la quantité
        i = 0;
        printf("La quantité de médicaments : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Afficher le prix
        i = 0;
        printf("Le prix de médicaments : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Afficher la date de fabrication
        i = 0;
        printf("La date de fabrication (jour mois année) : ");
        while (buf.tab[j] != '$') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);
        j++;

        // Afficher la date d'expiration
        i = 0;
        printf("La date de l'expiration (jour mois année) : ");
        while (buf.tab[j] != '$' && buf.tab[j] != '#') {
            ch[i] = buf.tab[j];
            j++;
            i++;
        }
        ch[i] = '\0';
        printf("%s\n", ch);

        if (buf.tab[j] == '$') {
            j++;
        }

        printf("\n");
    }
}

// Fonction pour extraire la référence à partir d'une chaîne de caractères
int ref(char tab[4]) {
    return atoi(tab);
}

// Fonction pour effectuer une suppression avec index
bool suppressionAvecIndex(int reference, FILE* F, entete e, Bloc* buffer, Index* index) {
    // Déclaration de la structure de localisation
    location l;
    
    // Ouverture du fichier binaire pour lecture/écriture
    F = fopen("medicaments.dat", "rb+");

    // Recherche de la référence dans le fichier avec l'index
    l = rechercheAvecIndex(reference, F, e, buffer, index);

    // Initialisation de la variable de suppression
    bool suppressionReussie = false;

    // Si la référence est trouvée dans le fichier
    if (l.trouve) {
        // Positionnement du curseur au début du bloc dans lequel l'enregistrement à supprimer se trouve
        fseek(F, (l.i - 1) * sizeof(Bloc), SEEK_SET);
        // Lecture du bloc dans le buffer
        fread(buffer->tab, sizeof(char), sizeof(Bloc), F);

        // Copie des données après l'enregistrement à supprimer pour le supprimer
        int cmp = taillenrg(*buffer, l.j);
        int k = 1;

        while (buffer->tab[k] != '#' && l.j + cmp < buffer->nb) {
            buffer->tab[k] = buffer->tab[l.j + cmp];
            k++;
            cmp++;
        }

        // Remplissage du reste du bloc avec des caractères '*'
        while (k <= 500) {
            buffer->tab[k] = '*';
            k++;
        }

        // Retour au début du bloc et écriture du bloc modifié dans le fichier
        fseek(F, (l.i - 1) * sizeof(Bloc), SEEK_SET);
        fwrite(buffer->tab, sizeof(char), sizeof(Bloc), F);

        // Décrémentation du nombre total d'enregistrements dans l'entête
        e.nbrenrg--;

        // Mise à jour de l'index en supprimant l'entrée correspondante
        for (int i = l.j; i <= e.nbrenrg; i++) {
            index[i] = index[i + 1];
        }

        // La suppression est réussie
        suppressionReussie = true;
    }

    // Fermeture du fichier
    fclose(F);

    // Retourne le statut de la suppression
    return suppressionReussie;
}
